import numpy as np
import cv2


face_cascade_db = cv2.CascadeClassifier(cv2.data.haarcascades+"haarcascade_frontalface_default.xml")
recognizer = cv2.face.LBPHFaceRecognizer_create()
recognizer.read('trainner.yml')

cap_cam = cv2.VideoCapture(0)



while True:
    # цикл считывающий кадры видео ряда
   ret, frame =cap_cam.read()
   gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
   faces = face_cascade_db.detectMultiScale(frame, scaleFactor=1.5,minNeighbors=5)

   for(x, y, w, h) in faces:
      # print(x, y, w, h)
       roi_gray = gray[y:y + h, x:x + w]#region of interest location of frame
       roi_color=frame[y:y+h, x:x+w]

       id_, conf = recognizer.predict(roi_gray)
       if conf >= 45 and conf <= 85:
           print (id_)
       img_item='my-image.png'
       cv2.imwrite(img_item,roi_gray) #сохраняем изображение

       cv2.rectangle(frame, (x, y), (x + w, y + h),  (0, 200, 0),2)  # прямоугольник вокруг лица ||| цвет BGR (можно поменять цвет)
       # '''''

       cv2.imshow('Face', frame[:, ::-1])  # отзеркалить выводимое видео
       cv2.waitKey(1)
#cv2.imshow('Face',gray)

        #if cv2.waitKey(1) &0xff == ord('f'): #окончить цикл нажав на кнопку
         #   break
        #else:
        #    continue

cap_cam.release()
cv2.destroyAllWindows()
